// <auto-generated />
using System;
using App.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace App.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251001132241_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("App.Domain.Entities.Moto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Modelo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PatioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Placa")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PatioId");

                    b.HasIndex("Placa")
                        .IsUnique();

                    b.ToTable("Motos");
                });

            modelBuilder.Entity("App.Domain.Entities.Patio", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("AreaM2")
                        .HasColumnType("float");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pais")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Patios");
                });

            modelBuilder.Entity("App.Domain.Entities.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BateriaPct")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("LastSeenAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("MotoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Serial")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Tipo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MotoId")
                        .IsUnique()
                        .HasFilter("[MotoId] IS NOT NULL");

                    b.HasIndex("Serial")
                        .IsUnique();

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("App.Domain.Entities.Moto", b =>
                {
                    b.HasOne("App.Domain.Entities.Patio", "Patio")
                        .WithMany("Motos")
                        .HasForeignKey("PatioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Patio");
                });

            modelBuilder.Entity("App.Domain.Entities.Tag", b =>
                {
                    b.HasOne("App.Domain.Entities.Moto", "Moto")
                        .WithOne("Tag")
                        .HasForeignKey("App.Domain.Entities.Tag", "MotoId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Moto");
                });

            modelBuilder.Entity("App.Domain.Entities.Moto", b =>
                {
                    b.Navigation("Tag");
                });

            modelBuilder.Entity("App.Domain.Entities.Patio", b =>
                {
                    b.Navigation("Motos");
                });
#pragma warning restore 612, 618
        }
    }
}
